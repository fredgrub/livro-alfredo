[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Nome do Livro",
    "section": "",
    "text": "Boas Vindas\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.",
    "crumbs": [
      "Boas Vindas"
    ]
  },
  {
    "objectID": "aulas/aula3.html",
    "href": "aulas/aula3.html",
    "title": "3¬† Usando o Interpretador (REPL) como Calculadora",
    "section": "",
    "text": "3.1 Come√ßando com o modo interativo do Julia\nQuem quiser j√° pode instalar o ambiente de programa√ß√£o, usem esse link. H√° tamb√©m alguns ambientes que permitem o uso da linguagem no seu navegador, sugiro a busca pelas palavras chave Julia Language online.\nDentro do Julia (ap√≥s chamar julia na linha de comando), vamos come√ßar com contas com n√∫meros inteiros:\n1 + 2\n\n3\n40 * 4\n\n160\nSim, como era de se esperar, podemos em Julia usar os operandos: +, - e *, o resultado ser√° como o esperado. Vejamos a seguir que com a divis√£o fica um pouco diferente:\n84 / 2\n\n42.0\nNotem que nesse caso, houve uma mudan√ßa de tipos, pois 84 e 2 s√£o inteiros e o resultado √© um n√∫mero em ponto flutuante (float), podemos ver isso, pois ao inv√©s de 42, tivemos como resultado 42.0.\nTamb√©m √© poss√≠vel pedir o resultado inteiro usando o operador div:\ndiv(84,2)\n\n42\nOu de forma equivalente usando o operador \\div (para conseguir ver o s√≠mbolo da divis√£o √© necess√°rio digitar \\div seguido da tecla &lt;tab&gt;).\nAl√©m das contas b√°sicas, tamb√©m d√° para fazer a exponencia√ß√£o:\n2^31\n\n2147483648\nExpress√µes mais complexas tamb√©m podem ser calculadas:\n23 + 2 * 2 + 3 * 4\n\n39\nSim, a preced√™ncia de operadores usual tamb√©m √© v√°lida em Julia. Mas, segue a primeira li√ß√£o de programa√ß√£o: Escreva para humanos, n√£o para m√°quinas.\n23 + (2 * 2) + (3 * 4)\n\n39\nEm Julia tamb√©m podemos fazer opera√ß√µes com n√∫meros em ponto flutuante:\n23.5 * 3.14\n\n73.79\nou\n12.5 / 2.0\n\n6.25\nAcima temos mais um exemplo de c√≥digo escrito para pessoas, ao se escrever 2.0 estamos deixando claro que o segundo par√¢metro √© um n√∫mero float.\n√â importante saber que n√∫meros em ponto flutuante tem precis√£o limitada, logo n√£o se espante com resultados inesperados como abaixo:\n1.2 - 1.0\n\n0.19999999999999996\nErros como esse s√£o bastante raros, tanto que usualmente confiamos plenamente nas contas feitas com computadores e calculadoras. Mas, √© bom saber que existem limita√ß√µes.\n2.6 - 0.7 - 1.9\n\n2.220446049250313e-16\nou\n0.1 + 0.2\n\n0.30000000000000004\nou ainda\n10e15 + 1 - 10e15\n\n0.0\nEsses problemas de precis√£o est√£o ligados a limita√ß√£o de como os n√∫meros s√£o representados no computador. De maneira simplificada, os valores no computador s√£o codificados em palavras, formadas por bits. Nos computadores modernos as palavras tem 64 bits, ou 8 bytes. Logo, uma outra limita√ß√£o est√° ligada aos n√∫meros inteiros muito grandes\n2^63\n\n-9223372036854775808\nMas, para um curso introdut√≥rio basta saber que existem essas limita√ß√µes. Como lidar com elas √© parte de um curso mais avan√ßado.\n√â importante notar que o erro acima √© um erro silencioso, ou seja quanto estamos usando n√∫meros inteiros, pode ocorrer que o n√∫mero a ser representado n√£o caiba no n√∫mero de bits dispon√≠vel, o que faz com que ocorra um erro.\nVoltando para as contas. Um outro operador interessante √© o % que faz o resto da divis√£o\n4 % 3\n\n1\nAt√© agora vimos como trabalhar com um √∫nico valor, ou seja, como se fosse no visor de uma calculadora. Mas, √© poss√≠vel ir al√©m. Ao inv√©s de termos teclas de mem√≥ria, o computador nos oferece vari√°veis. Elas s√£o como nomes para valores que queremos guardar e usar mais tarde.\nAl√©m das opera√ß√µes b√°sicas tamb√©m temos as opera√ß√µes matem√°ticas (fun√ß√µes), como por exemplo o seno, sin em ingl√™s. Para saber como uma fun√ß√£o funciona podemos pedir ajuda ao ambiente, usando uma ? ou o macro @doc, e em seguida digitando o que queremos saber, como por exemplo em:\n@doc sin\nNotem que nem tudo que foi apresentado faz sentido no momento, mas j√° d√° para entender o uso de uma fun√ß√£o como sin. Vejamos agora a raiz quadrada:\n@doc sqrt\nNela vemos que √© poss√≠vel calcular a raiz como em:\nsqrt(4)\n\n2.0\nsqrt(4.0)\n\n2.0\nMas, observamos tamb√©m na documenta√ß√£o a fun√ß√£o big(), que tem a seguinte ajuda:\n@doc BigInt\nCom n√∫meros BigInt, j√° n√£o h√° problemas de estouro, como podemos ver abaixo:\nbig(2) ^ 1002\n\n42860344287450692837937001962400072422456192468221344297750015534814042044997444899727935152627834325103786916702125873007485811427692561743938310298794299215738271099296923941684298420249484567511816728612185899934327765069595070236662175784308251658284785910746168670641719326610497547348822672277504",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Usando o Interpretador (REPL) como Calculadora</span>"
    ]
  },
  {
    "objectID": "aulas/aula3.html#vari√°veis-e-seus-tipos",
    "href": "aulas/aula3.html#vari√°veis-e-seus-tipos",
    "title": "3¬† Usando o Interpretador (REPL) como Calculadora",
    "section": "3.2 Vari√°veis e seus tipos",
    "text": "3.2 Vari√°veis e seus tipos\nEm Julia tamb√©m temos o conceito de vari√°veis, que servem para armazenar os diferentes conte√∫dos de dados poss√≠veis.\n\na = 7\n2 + a\n\n9\n\n\n√â importante notar que as vari√°veis em Julia podem receber novos valores e o tipo da vari√°vel depende do que foi atribu√≠do por √∫ltimo.\n\na = 3\na = a + 1\ntypeof(a)\n\nInt64\n\n\nAproveitando o momento, podemos ver que h√° v√°rios tipos primitivos em Julia, sendo os principais:\n\ntypeof(1)\ntypeof(1.1)\ntypeof(\"Bom dia\")\n\nString\n\n\nFalando em Strings, elas s√£o definidas por conjuntos de caracteres entre aspas como:\n\ns1 = \"Olha que legal\"\ns2 = \"Outra String\"\n\n\"Outra String\"\n\n\nD√° tamb√©m para fazer opera√ß√µes com strings como concatena√ß√£o:\n\ns1 = \"Tenha um\"\ns2 = \" Bom dia\"\ns3 = s1 * s2\n\n\"Tenha um Bom dia\"\n\n\nOu pot√™ncia:\n\ns = \"Nao vou mais fazer coisas que possam desagradar os meus colegas \"\ns ^ 10\n\n\"Nao vou mais fazer coisas que possam desagradar os meus colegas Nao vou mais fazer coisas que possam desagradar os meus colegas Nao vou mais fazer coisas que possam desagradar os meus colegas Nao vou mais fazer coisas que possam desagradar os meus colegas Nao vou mais fa\" ‚ãØ 98 bytes ‚ãØ \"s meus colegas Nao vou mais fazer coisas que possam desagradar os meus colegas Nao vou mais fazer coisas que possam desagradar os meus colegas Nao vou mais fazer coisas que possam desagradar os meus colegas Nao vou mais fazer coisas que possam desagradar os meus colegas \"\n\n\nAinda sobre vari√°veis, h√° umas regras com rela√ß√£o aos seus nomes, tem que come√ßar com uma letra (ou com _), pode ter d√≠gitos e n√£o pode ser uma palavra reservada. √â bom notar que Julia por ser uma linguagem moderna, aceita nomes de caracteres em unicode, por exemplo o Œî (\\Delta):\n\nŒî = 2\n\n2\n\n\nMas, a linguagem vai bem al√©m com caracteres de animais e s√≠mbolos:\n\nüê± = 5 # \\:cat: &lt;tab&gt;\nüê∂ = 3 # \\:dog: &lt;tab&gt;\nüè† = 20 # \\:house: &lt;tab&gt;\n\n20\n\n\nIsso n√£o adiciona nada do lado de algoritmos, mas √© poss√≠vel ter vari√°veis bem bonitinhas. A lista de figuras pode ser encontrada aqui.",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Usando o Interpretador (REPL) como Calculadora</span>"
    ]
  },
  {
    "objectID": "aulas/aula3.html#sa√≠da-de-dados",
    "href": "aulas/aula3.html#sa√≠da-de-dados",
    "title": "3¬† Usando o Interpretador (REPL) como Calculadora",
    "section": "3.3 Sa√≠da de dados",
    "text": "3.3 Sa√≠da de dados\nPara fazer sa√≠das usam-se dois comandos, print() e o println(), sendo que o primeiro n√£o pula linha e o segundo pula.\n\nprint(\"Hello \")\nprintln(\"World!\")\nprintln(\"Ola, mundo!\")\n\nHello World!\nOla, mundo!\n\n\nPara evitar que se digitem muitos caracteres, por vezes podemos usar ‚Äúa√ßucares sint√°ticos‚Äù.\n\nx = 1\nx = x + 1\nx += 1  # forma equivalente a acima\n\n3\n\n\nAcima, vimos a forma de se inserir coment√°rios em Julia (sim esses ser√£o ignorados pelo computador).\nExerc√≠cio: Fa√ßa o passo a passo para encontrar as ra√≠zes da equa√ß√£o de segundo grau \\(x^2 - 5 x + 6\\), usando as v√°riaveis a, b, c, \\Delta, x1 e x2.",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Usando o Interpretador (REPL) como Calculadora</span>"
    ]
  },
  {
    "objectID": "aulas/aula4.html",
    "href": "aulas/aula4.html",
    "title": "4¬† Introdu√ß√£o √†s Fun√ß√µes",
    "section": "",
    "text": "4.1 O uso de fun√ß√µes √© uma abstra√ß√£o natural\nNa aula passada j√° vimos umas fun√ß√µes e isso foi bem natural, foram elas:\nInclusive, aqui vale a pena ver que podemos pedir ajuda ao Julia para saber o que fazem as fun√ß√µes. Para isso, se usa o ? antes da fun√ß√£o:\nAo fazer isso, inclusive descobrimos que o div() pode ser usado tamb√©m como .\nUma outra fun√ß√£o bem √∫til √© a que permite transformar um tipo de valor em outro.\nPara convers√£o de valores em ponto flutuante para inteiros, temos a fun√ß√£o trunc.\nDe forma inversa temos o float.\nFinalmente, podemos transformar um valor em uma string, como em:\nou\nTamb√©m tem muitas fun√ß√µes matem√°ticas prontas como - sin(x) - calcula o seno de x em radianos - cos(x) - calcula o cosseno de x em radianos - tan(x) - calcula a tangente de x em radianos - deg2rad(x) - converte x de graus em radianos - rad2deg(x) - converte x de radianos em graus - log(x) - calcula o logar√≠tmo natural de x - log(b, x) - calcula o logar√≠tmo de x na base b - log2(x) - calcula o logar√≠tmo de x na base 2 - log10(x) - calcula o logar√≠tmo de x na base 10 - exp(x) - calcula o expoente da base natural de x - abs(x) - calcula o m√≥dulo de x - sqrt(x) - calcula a raiz quadrada de x - cbrt(x) - raiz c√∫bica de x - factorial(x) - calcula o fatorial de x\nA melhor forma de se acostumar a usar as fun√ß√µes √© fazendo contas e verificando os resultados. Uma dica importante √© que para fun√ß√µes mais complexas, pode ser que j√° existam fun√ß√µes prontas em Julia. Para isso uma busca com as palavras chave. Um exemplo a seguir para procurar a fun√ß√£o para o c√°lculo de seno hiperb√≥lico: ‚Äújulia lang hiperbolic sin‚Äù. A busca pelo termo em ingl√™s √© uma boa dica para buscas em geral.\nEm julia tamb√©m √© poss√≠vel criar fun√ß√µes conforme as suas necessidades, como abaixo:\nPara usar uma fun√ß√£o, basta cham√°-la:\nFun√ß√µes, podem receber um ou mais par√¢metros:\nTamb√©m √© poss√≠vel que uma fun√ß√£o chame outra fun√ß√£o como em:\nMais ainda, tamb√©m √© poss√≠vel diferenciar fun√ß√µes por meio da quantidade de par√¢metros.\nConforme a chamada, a fun√ß√£o chamada ser√° diferente:\nTamb√©m d√° para chamar fun√ß√µes com vari√°veis e com opera√ß√µes, como em:\nAs fun√ß√µes que vimos at√© agora imprimem mensagens, mas n√£o devolvem nada. O typeof() delas √© nothing, ou seja, algo que n√£o pode ser atribu√≠do.\nMas, tamb√©m √© poss√≠vel fazer fun√ß√µes que devolvem valores, como:\nNesse caso, se for passado um par√¢metro num√©rico, a fun√ß√£o devolver√° o valor incrementado (adicionado de 1).\nClaro que isso pode ser usado com f√≥rmulas mais complicadas como:\nExerc√≠cio: Fa√ßa uma fun√ß√£o para encontrar o de uma equa√ß√£o de segundo grau",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Introdu√ß√£o √†s Fun√ß√µes</span>"
    ]
  },
  {
    "objectID": "aulas/aula4.html#o-uso-de-fun√ß√µes-√©-uma-abstra√ß√£o-natural",
    "href": "aulas/aula4.html#o-uso-de-fun√ß√µes-√©-uma-abstra√ß√£o-natural",
    "title": "4¬† Introdu√ß√£o √†s Fun√ß√µes",
    "section": "",
    "text": "typeof() - Dado um par√¢metro devolve o seu tipo. Vari√°veis est√£o associadas a tipos;\ndiv() - Dados dois par√¢metros devolve a divis√£o inteira do primeiro pelo segundo;\nprint() e println() - Dados diversos par√¢metros os imprime, sem devolver nada.\n\n\n?typeof()\n?div()\n?print()\n\n\nparse(Float64, \"32\")\n\ntrunc(Int64, 2.25)\n\nfloat(2)\n\nstring(3)\n\nstring(3.57)\n\n\n\nfunction mensagemDeBomDia()\n   println(\"Tenha um bom dia!\")\nend\n\nMensagemDeBomDia()\n\nfunction imprime(a)\n   println(\" Vou imprimir \", a)\nend\nimprime(42)\n\nfunction imprimeduasvezes(a)\n   imprime(a)\n   imprime(a)\nend\nimprimeduasvezes(13)\n\nfunction recebe(a)\n  println(\"Recebi um parametro: \", a)\nend\nfunction recebe(a, b)\n  println(\"Recebi dois parametros: \", a, \" \", b)\nend\n\nrecebe(1)\nrecebe(1, 2)\n\na = 10\nrecebe(a)\nrecebe(a, a + 1)\n\n\nfunction soma1(a)\n  return a + 1\nend\n\n\nfunction hipotenusa(a, b)\n  hip = a * a + b * b\n  return hip\nend",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Introdu√ß√£o √†s Fun√ß√µes</span>"
    ]
  }
]